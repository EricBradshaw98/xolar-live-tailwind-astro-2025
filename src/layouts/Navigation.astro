---
import xolarLogo from '../assets/XOLARLARGE.webp';

const currentPath = Astro.url.pathname;
const navItems = [
  { 
    href: '/residential', 
    label: 'Residential',
    subItems: [
      { href: '/residential', label: 'All Residential' },
      { href: '/residential/solar-panels', label: 'Solar Panels' },
      { href: '/residential/tesla-powerwall', label: 'Tesla Powerwall' },
      { href: '/residential/heat-pumps', label: 'Heat Pumps' },
      { href: '/residential/ev-charging', label: 'EV Charging' }
    ]
  },
  { 
    href: '/commercial', 
    label: 'Commercial',
    subItems: [
      { href: '/commercial', label: 'All Commercial' },
      { href: '/commercial/solar-solutions', label: 'Solar Solutions' },
      { href: '/commercial/energy-storage', label: 'Energy Storage' },
      { href: '/commercial/maintenance', label: 'Maintenance' }
    ]
  },
  { href: '/service-areas', label: 'Service Areas' },
  { href: '/quote-builder', label: 'Quote Builder' },
  { href: '/news', label: 'News' }
];
---

<nav role="navigation" aria-label="Main navigation" class="bg-white shadow-lg relative z-40">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16 lg:h-20">
      
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/" 
           class="flex items-center space-x-3 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded-lg p-1 transition-opacity duration-200"
           aria-label="Xolar Inc. - Home">
          <img 
            src={xolarLogo.src} 
            alt="Xolar Inc. Logo" 
            class="h-14 w-auto"
            width={xolarLogo.width}
            height={xolarLogo.height}
          />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden lg:block">
        <ul class="flex items-center space-x-8" role="menubar">
          {navItems.map((item) => (
            <li role="none">
              {item.subItems ? (
                <div class="relative group">
                  <button
                    type="button"
                    class="flex items-center text-gray-700 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
                    role="menuitem"
                    aria-haspopup="true"
                    aria-expanded="false"
                    data-dropdown-toggle
                  >
                    {item.label}
                    <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                    <span class="sr-only">(has submenu)</span>
                  </button>
                  
                  <!-- Dropdown Menu -->
                  <div class="absolute left-0 mt-2 w-56 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 transform group-hover:translate-y-0 translate-y-2 group-hover:scale-100 scale-95 z-50"
                       role="menu"
                       aria-label={`${item.label} submenu`}>
                    <div class="py-2">
                      {item.subItems.map((subItem) => (
                        <a href={subItem.href}
                           class={`block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-primary-600 focus:bg-gray-50 focus:text-primary-600 focus:outline-none transition-colors duration-150 ${
                             currentPath === subItem.href ? 'bg-primary-100 text-primary-700 font-semibold' : ''
                           }`}
                           role="menuitem">
                          {subItem.label}
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <a href={item.href}
                   class={`text-gray-700 hover:text-primary-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 ${
                     currentPath === item.href || currentPath.startsWith(item.href + '/') ? 'text-primary-600 font-semibold bg-primary-50' : ''
                   }`}
                   role="menuitem"
                   aria-current={currentPath === item.href ? 'page' : undefined}>
                  {item.label}
                </a>
              )}
            </li>
          ))}
        </ul>
      </div>

      <!-- CTA Button -->
      <div class="hidden lg:block">
        <a href="/quote" 
           class="bg-primary-500 text-white px-6 py-2 rounded-lg font-medium hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors duration-200">
          Get Free Quote
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="lg:hidden">
        <button type="button"
                class="text-gray-700 hover:text-primary-600 p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 relative"
                aria-controls="mobile-menu"
                aria-expanded="false"
                data-mobile-menu-toggle>
          <span class="sr-only">Open main menu</span>
          <!-- Animated hamburger icon -->
          <div class="w-6 h-6 relative">
            <span class="hamburger-line absolute left-0 block w-6 h-0.5 bg-current transform transition-all duration-300 ease-in-out" style="top: 4px;"></span>
            <span class="hamburger-line absolute left-0 block w-6 h-0.5 bg-current transform transition-all duration-300 ease-in-out" style="top: 11px;"></span>
            <span class="hamburger-line absolute left-0 block w-6 h-0.5 bg-current transform transition-all duration-300 ease-in-out" style="top: 18px;"></span>
          </div>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Navigation Menu -->
  <div class="lg:hidden overflow-hidden transition-all duration-300 ease-in-out max-h-0" id="mobile-menu" data-mobile-menu>
    <div class="border-t border-gray-200 bg-white">
      <ul class="px-4 py-2 space-y-1" role="menu" aria-label="Mobile navigation">
        {navItems.map((item) => (
          <li role="none">
            {item.subItems ? (
              <div class="space-y-1">
                <button type="button"
                        class="w-full text-left flex items-center justify-between px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600 hover:bg-gray-50 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
                        role="menuitem"
                        aria-haspopup="true"
                        aria-expanded="false"
                        data-mobile-dropdown-toggle>
                  {item.label}
                  <svg class="h-5 w-5 transform transition-transform duration-200 ease-in-out" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                <div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 pl-4 space-y-1" data-mobile-submenu>
                  {item.subItems.map((subItem) => (
                    <a href={subItem.href}
                       class={`block px-3 py-2 text-sm text-gray-600 hover:text-primary-600 hover:bg-gray-50 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 ${
                         currentPath === subItem.href ? 'text-primary-700 bg-primary-100 font-semibold' : ''
                       }`}
                       role="menuitem">
                      {subItem.label}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a href={item.href}
                 class={`block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600 hover:bg-gray-50 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 ${
                   currentPath === item.href || currentPath.startsWith(item.href + '/') ? 'text-primary-600 bg-primary-100 font-semibold' : ''
                 }`}
                 role="menuitem"
                 aria-current={currentPath === item.href ? 'page' : undefined}>
                {item.label}
              </a>
            )}
          </li>
        ))}
        <li role="none" class="pt-4 border-t border-gray-200">
          <a href="/quote" 
             class="block w-full text-center bg-primary-500 text-white px-4 py-2 rounded-lg font-medium hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors duration-200">
            Get Free Quote
          </a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuToggle = document.querySelector('[data-mobile-menu-toggle]');
    const mobileMenu = document.querySelector('[data-mobile-menu]');
    const dropdownToggles = document.querySelectorAll('[data-mobile-dropdown-toggle]');

    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener('click', function() {
        const isExpanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true';
        const hamburgerLines = mobileMenuToggle.querySelectorAll('.hamburger-line');
        
        mobileMenuToggle.setAttribute('aria-expanded', !isExpanded);
        
        if (isExpanded) {
          // Closing menu
          mobileMenu.style.maxHeight = '0px';
          // Reset hamburger to normal state
          hamburgerLines[0].style.transform = 'translateY(0) rotate(0deg)';
          hamburgerLines[1].style.opacity = '1';
          hamburgerLines[2].style.transform = 'translateY(0) rotate(0deg)';
        } else {
          // Opening menu
          mobileMenu.style.maxHeight = mobileMenu.scrollHeight + 'px';
          // Transform hamburger to X
          hamburgerLines[0].style.transform = 'translateY(7px) rotate(45deg)';
          hamburgerLines[1].style.opacity = '0';
          hamburgerLines[2].style.transform = 'translateY(-7px) rotate(-45deg)';
          
          // Focus management
          setTimeout(() => {
            mobileMenu.querySelector('a, button')?.focus();
          }, 150);
        }
      });
    }

    // Mobile dropdown functionality
    dropdownToggles.forEach(toggle => {
      toggle.addEventListener('click', function() {
        const submenu = this.parentElement.querySelector('[data-mobile-submenu]');
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        const chevron = toggle.querySelector('svg');
        
        this.setAttribute('aria-expanded', !isExpanded);
        
        if (isExpanded) {
          // Closing submenu
          submenu.style.maxHeight = '0px';
          chevron.style.transform = 'rotate(0deg)';
        } else {
          // Opening submenu
          submenu.style.maxHeight = submenu.scrollHeight + 'px';
          chevron.style.transform = 'rotate(180deg)';
        }
      });
    });

    // Close mobile menu on escape
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && mobileMenu && mobileMenu.style.maxHeight !== '0px') {
        const hamburgerLines = mobileMenuToggle?.querySelectorAll('.hamburger-line');
        
        mobileMenuToggle?.setAttribute('aria-expanded', 'false');
        mobileMenu.style.maxHeight = '0px';
        
        // Reset hamburger animation
        if (hamburgerLines) {
          hamburgerLines[0].style.transform = 'translateY(0) rotate(0deg)';
          hamburgerLines[1].style.opacity = '1';
          hamburgerLines[2].style.transform = 'translateY(0) rotate(0deg)';
        }
        
        mobileMenuToggle?.focus();
      }
    });

    // Desktop dropdown functionality with keyboard support
    const dropdownButtons = document.querySelectorAll('[data-dropdown-toggle]');
    
    dropdownButtons.forEach(button => {
      const dropdown = button.nextElementSibling;
      
      button.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          dropdown?.classList.remove('opacity-0', 'invisible');
          dropdown?.classList.add('opacity-100', 'visible');
          dropdown?.querySelector('a')?.focus();
        }
      });
      
      dropdown?.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          dropdown.classList.add('opacity-0', 'invisible');
          dropdown.classList.remove('opacity-100', 'visible');
          button.focus();
        }
      });
    });
  });
</script>