---
// Solar Affordability Program Carousel Component
const affordabilityPrograms = [
  {
    title: "Solar Affordability Program",
    subtitle: "For Low Income Households",
    description: "We also have a Solar Affordability Program for low income households that need help fronting costs.",
    features: [
      "No upfront costs required",
      "Flexible payment plans",
      "Government rebate assistance",
      "Energy bill reduction up to 90%"
    ],
    ctaText: "Learn More About Affordability",
    ctaLink: "/affordability-program",
    image: "/images/affordable-solar.jpg",
    backgroundColor: "bg-gradient-to-r from-green-600 to-emerald-600"
  },
  {
    title: "Government Rebates & Incentives",
    subtitle: "Maximize Your Savings",
    description: "Take advantage of federal and provincial rebates to make solar even more affordable for your family.",
    features: [
      "Federal solar rebates up to $5,000",
      "Provincial incentive programs",
      "Net metering benefits",
      "Tax credit assistance"
    ],
    ctaText: "Check Available Rebates",
    ctaLink: "/rebates-incentives",
    image: "/images/government-rebates.jpg",
    backgroundColor: "bg-gradient-to-r from-blue-600 to-cyan-600"
  },
  {
    title: "Financing Solutions",
    subtitle: "Make Solar Accessible",
    description: "Flexible financing options designed to fit every budget and make clean energy accessible to all Canadians.",
    features: [
      "0% interest financing available",
      "No credit check options",
      "Monthly payments as low as $99",
      "Energy savings from day one"
    ],
    ctaText: "Explore Financing Options",
    ctaLink: "/financing",
    image: "/images/solar-financing.jpg",
    backgroundColor: "bg-gradient-to-r from-primary-600 to-yellow-500"
  }
];
---

<section class="py-16 lg:py-24 bg-gray-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Carousel Container -->
    <div class="relative affordability-carousel" data-carousel>
      <!-- Carousel Track -->
      <div class="carousel-track overflow-hidden rounded-2xl shadow-2xl">
        {affordabilityPrograms.map((program, index) => (
          <div
            class={`carousel-slide ${program.backgroundColor} text-white relative min-h-[500px] flex items-center ${index === 0 ? 'active' : ''}`}
            data-slide={index}
          >
            <!-- Background Pattern -->
            <div class="absolute inset-0 opacity-10">
              <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                <defs>
                  <pattern id={`pattern-${index}`} x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
                    <circle cx="10" cy="10" r="2" fill="currentColor" opacity="0.3"/>
                  </pattern>
                </defs>
                <rect width="100" height="100" fill={`url(#pattern-${index})`}/>
              </svg>
            </div>

            <!-- Content -->
            <div class="relative z-10 w-full">
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
                <!-- Text Content -->
                <div class="space-y-6 px-8 lg:px-12 py-12">
                  <div>
                    <p class="text-sm font-medium text-white/80 uppercase tracking-wide mb-2">
                      {program.subtitle}
                    </p>
                    <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 leading-tight">
                      {program.title}
                    </h2>
                    <p class="text-lg text-white/90 leading-relaxed mb-6">
                      {program.description}
                    </p>
                  </div>

                  <!-- Features List -->
                  <ul class="space-y-3">
                    {program.features.map((feature) => (
                      <li class="flex items-center space-x-3">
                        <svg class="w-5 h-5 text-white flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="text-white/90">{feature}</span>
                      </li>
                    ))}
                  </ul>

                  <!-- CTA Button -->
                  <div class="pt-4">
                    <a
                      href={program.ctaLink}
                      class="inline-flex items-center justify-center px-8 py-4 bg-white text-gray-900 font-semibold rounded-lg hover:bg-gray-100 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-transparent"
                    >
                      {program.ctaText}
                      <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </a>
                  </div>
                </div>

                <!-- Visual Element -->
                <div class="hidden lg:block relative px-8">
                  <div class="relative">
                    <!-- Decorative Solar Panel Icon -->
                    <div class="w-32 h-32 mx-auto bg-white/20 rounded-2xl flex items-center justify-center backdrop-blur-sm">
                      <svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                      </svg>
                    </div>

                    <!-- Floating Elements -->
                    <div class="absolute -top-4 -right-4 w-8 h-8 bg-white/30 rounded-full animate-pulse"></div>
                    <div class="absolute -bottom-4 -left-4 w-6 h-6 bg-white/20 rounded-full animate-pulse" style="animation-delay: 1s;"></div>
                    <div class="absolute top-1/2 -right-8 w-4 h-4 bg-white/25 rounded-full animate-pulse" style="animation-delay: 2s;"></div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Slide Number -->
            <div class="absolute top-4 right-4 bg-black/20 backdrop-blur-sm text-white text-sm px-3 py-1 rounded-full">
              {index + 1} / {affordabilityPrograms.length}
            </div>
          </div>
        ))}
      </div>

      <!-- Navigation Dots -->
      <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3">
        {affordabilityPrograms.map((_, index) => (
          <button
            class={`carousel-dot w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-white scale-125' : 'bg-white/50 hover:bg-white/75'}`}
            data-slide-to={index}
            aria-label={`Go to slide ${index + 1}`}
          ></button>
        ))}
      </div>

      <!-- Navigation Arrows -->
      <button
        class="carousel-prev absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white p-3 rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-transparent"
        aria-label="Previous slide"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button
        class="carousel-next absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white p-3 rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-transparent"
        aria-label="Next slide"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>
</section>

<style>
  .affordability-carousel {
    position: relative;
  }

  .carousel-track {
    position: relative;
    height: 500px;
  }

  .carousel-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-slide.active {
    opacity: 1;
    transform: translateX(0);
  }

  .carousel-slide.prev {
    transform: translateX(-100%);
    opacity: 0;
  }

  .carousel-slide.next {
    transform: translateX(100%);
    opacity: 0;
  }

  /* Dot active state */
  .carousel-dot.active {
    background-color: white !important;
    transform: scale(1.25);
  }

  /* Smooth animations for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .carousel-slide {
      transition: opacity 0.3s ease;
      transform: none !important;
    }

    .carousel-slide:not(.active) {
      opacity: 0;
    }

    .carousel-slide.active {
      opacity: 1;
    }
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .carousel-track {
      height: auto;
      min-height: 400px;
    }

    .carousel-slide {
      position: relative;
      transform: none;
    }

    .carousel-slide:not(.active) {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.querySelector('[data-carousel]');
    if (!carousel) return;

    const slides = carousel.querySelectorAll('.carousel-slide');
    const dots = carousel.querySelectorAll('.carousel-dot');
    const prevBtn = carousel.querySelector('.carousel-prev');
    const nextBtn = carousel.querySelector('.carousel-next');

    let currentSlide = 0;
    let autoplayInterval;

    function updateSlide(newSlide) {
      // Remove active classes
      slides[currentSlide].classList.remove('active');
      dots[currentSlide].classList.remove('active');

      // Add previous state
      slides[currentSlide].classList.add('prev');

      // Update current slide
      currentSlide = newSlide;

      // Remove previous state after transition
      setTimeout(() => {
        slides.forEach(slide => slide.classList.remove('prev'));
      }, 600);

      // Add active classes
      slides[currentSlide].classList.add('active');
      dots[currentSlide].classList.add('active');
    }

    function nextSlide() {
      const newSlide = (currentSlide + 1) % slides.length;
      updateSlide(newSlide);
    }

    function prevSlide() {
      const newSlide = (currentSlide - 1 + slides.length) % slides.length;
      updateSlide(newSlide);
    }

    // Navigation event listeners
    nextBtn.addEventListener('click', () => {
      nextSlide();
      resetAutoplay();
    });

    prevBtn.addEventListener('click', () => {
      prevSlide();
      resetAutoplay();
    });

    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        updateSlide(index);
        resetAutoplay();
      });
    });

    // Keyboard navigation
    carousel.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        resetAutoplay();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        resetAutoplay();
      }
    });

    // Autoplay functionality
    function startAutoplay() {
      autoplayInterval = setInterval(nextSlide, 5000); // 5 seconds
    }

    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    function resetAutoplay() {
      stopAutoplay();
      startAutoplay();
    }

    // Pause autoplay on hover
    carousel.addEventListener('mouseenter', stopAutoplay);
    carousel.addEventListener('mouseleave', startAutoplay);

    // Pause autoplay when tab is not visible
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoplay();
      } else {
        startAutoplay();
      }
    });

    // Initialize autoplay
    startAutoplay();

    // Touch/swipe support for mobile
    let startX = 0;
    let currentX = 0;
    let isDragging = false;

    carousel.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      isDragging = true;
      stopAutoplay();
    });

    carousel.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      currentX = e.touches[0].clientX;
    });

    carousel.addEventListener('touchend', () => {
      if (!isDragging) return;
      isDragging = false;

      const diffX = startX - currentX;
      const threshold = 50;

      if (Math.abs(diffX) > threshold) {
        if (diffX > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
      }

      resetAutoplay();
    });
  });
</script>